DESCRIPTION:
The fork() function is used to create a new process by duplicating the old process or we can say existing process
from which it is called. The existing process from which this function is called becomes 
the parent process and the newly created process becomes the child process.

1.The child has a unique Process ID like any other process  ID which is running in the operating system.
2.The child has a parent process ID which is same as the PID of the process that created it.
3.CPU time counters as well as Resource utilization  reset to zero in child process.
4.The parent invoke the wait() call to wait for the child process to complete before exiting the program.

Fork() has an interesting behavior while returning to the calling method. If the fork() function is successful then it returns twice.
Once it returns in the child process with return value ‘0’ and then it returns in the parent process with child’s PID as return value. 
This behavior is because of the fact that once the fork is called, child process is  created and since the child process shares the text segment with parent process
and continues execution from the next statement in the same text segment so fork returns twice (once in parent and once in child).

AlGORITHM
1. It takes no input.(0)
2. To parent process,it take child PID number.(1)
3. Check availabel kernel resources.(0)
4 . Get free proc table slot ,unique pid number.(1)
5 . If executing process is parent process change child state ready to run.(1)
6. Otherwise return child ID.(0)
7.  Return 0.	(0)

COMPLEXITY
Overall Complexity of fork system call is O(n).

CONSTRAINTS
1.The parent, receives from fork the process identifier of the child,
    which is always a positive number.	
2.The parent process passes this identifier to the waitpid system call to suspend execution until the child has exited. 
3.When this has happened, the parent resumes execution and exits by means of the return statement.	
4.Other problems with fork include deadlocks that might occur in multi-threaded programs due to interactions with dynamic linking.
											    
TEST CASE
The parent and child processes have their own copies of the data, so it will give output of this sequence.											
1.If 8 is passed as a parameter on the command line, the child process will output 8, 4, 2, 1.
2.If 16 is passed as a parameter on the command line, the child process will output 16,8, 4, 2, 1.
3.If 32 is passed as a parameter on the command line, the child process will output32,16, 8, 4, 2, 1.
